#include <iostream>
#include <gtest/gtest.h>
#include <layers/tanh.hpp>
#include "include/commondata4d.hpp"
#include "ops/comparisons.hpp"
#include <layers/input.hpp>

using namespace EigenSinn;

namespace EigenSinnTest {

  class Tanh4dGpu : public ::testing::Test {

  protected:
    void SetUp() override {

      cd.init();
      output.resize(cd.dims);
      dinput.resize(cd.dims);

      dinput.setValues({ {{{0.04528892, 0.42830655, 0.39511928, 0.42592707},
                  {0.44737732, 0.44672588, 0.07295795, 0.44348526},
                  {0.43695542, 0.38013405, 0.23150262, 0.42447206},
                  {0.27261505, 0.42261809, 0.43373081, 0.32124490}},

                 {{0.39493048, 0.35614389, 0.30586940, 0.44630176},
                  {0.37525165, 0.42796096, 0.43332076, 0.25146982},
                  {0.31348830, 0.33408251, 0.38017604, 0.44613680},
                  {0.43524477, 0.27205333, 0.41005948, 0.44178560}},

                 {{0.44404280, 0.44765535, 0.15218988, 0.34415418},
                  {0.44742921, 0.10715725, 0.41332260, 0.42232651},
                  {0.44120279, 0.44741687, 0.42704025, 0.24804993},
                  {0.40518647, 0.42365146, 0.36293566, 0.44773087}}},


                {{{0.43037373, 0.44443020, 0.40329248, 0.17514485},
                  {0.33443031, 0.23840666, 0.44728753, 0.25128451},
                  {0.44604325, 0.44442561, 0.43236017, 0.43254480},
                  {0.43680051, 0.43013439, 0.42790529, 0.43445051}},

                 {{0.11213765, 0.44420683, 0.44671196, 0.42323396},
                  {0.31997576, 0.10712562, 0.44123831, 0.32687846},
                  {0.05407778, 0.43996185, 0.37530848, 0.09805045},
                  {0.22710343, 0.44757152, 0.09554789, 0.44774094}},

                 {{0.43413597, 0.39092231, 0.44612336, 0.39624271},
                  {0.35985345, 0.43757296, 0.40749505, 0.44374388},
                  {0.01849233, 0.21760891, 0.42772216, 0.42068788},
                  {0.09305122, 0.44304121, 0.40487280, 0.35084713}}} });

      output.setValues({ {{{0.04535113, 0.74405116, 0.46566656, 0.53421241},
                  {0.63389724, 0.62442380, 0.07321993, 0.69422990},
                  {0.72053963, 0.43885094, 0.24093817, 0.53026384},
                  {0.28898263, 0.75639671, 0.55780602, 0.35076389}},

                 {{0.46531066, 0.40042195, 0.33048508, 0.61988795},
                  {0.43064564, 0.74485499, 0.55643719, 0.26389804},
                  {0.34043336, 0.36836749, 0.43892255, 0.67664051},
                  {0.56302631, 0.28830469, 0.49578729, 0.70244688}},

                 {{0.69116497, 0.64107203, 0.15466850, 0.38268590},
                  {0.63493603, 0.10799900, 0.50300425, 0.52463514},
                  {0.58722681, 0.63468105, 0.74695897, 0.25991929},
                  {0.48548767, 0.75428110, 0.41085777, 0.64536124}}},


                {{{0.54707539, 0.68889022, 0.48162022, 0.17899278},
                  {0.36885402, 0.24880531, 0.63225782, 0.26368195},
                  {0.61743999, 0.68891776, 0.55329782, 0.73346597},
                  {0.56870276, 0.54634780, 0.74498379, 0.72817320}},

                 {{0.11310474, 0.69021809, 0.67100179, 0.75514191},
                  {0.34905878, 0.10796661, 0.70482039, 0.35840660},
                  {0.05418389, 0.58153421, 0.43073985, 0.09869257},
                  {0.23596197, 0.65740585, 0.09614143, 0.64900512}},

                 {{0.72907418, 0.45787451, 0.67675906, 0.46779516},
                  {0.40608376, 0.57165897, 0.49030110, 0.60077667},
                  {0.01849655, 0.22531362, 0.74540591, 0.76022017},
                  {0.09359884, 0.69652289, 0.48484221, 0.39248568}}} });
    }

    CommonData4d<GpuDevice, RowMajor> cd;
    DeviceTensor<float, 4, GpuDevice, RowMajor> output, dinput;
  };

  TEST_F(Tanh4dGpu, Backward) {

    Input<float, 4, GpuDevice, RowMajor> input;
    input.set_input(cd.convInput);

    Tanh<float, 4, GpuDevice, RowMajor> tanh;
    tanh.init();
    tanh.forward(input);
    tanh.backward(input, cd.convInput.raw());
 
    EXPECT_TRUE(is_elementwise_approx_eq(tanh.get_output(), output));
    EXPECT_TRUE(is_elementwise_approx_eq(tanh.get_loss_by_input_derivative(), dinput));
  }

  TEST_F(Tanh4dGpu, BackwardCudnn) {

    Input<float, 4, GpuDevice, RowMajor> input;
    input.set_input(cd.convInput);

    Tanh<float, 4, GpuDevice, RowMajor> tanh;
    tanh.set_cudnn(true);
    tanh.init();
    tanh.forward(input);
    tanh.backward(input, cd.convInput.raw());

    EXPECT_TRUE(is_elementwise_approx_eq(tanh.get_output(), output));
    EXPECT_TRUE(is_elementwise_approx_eq(tanh.get_loss_by_input_derivative(), dinput));
  }

}