#pragma once

#include <unsupported/Eigen/CXX11/Tensor>

using namespace Eigen;
using namespace EigenSinn;

namespace EigenSinnTest {

  template<typename Device_>
  struct CommonData2d {

    // data will be presented in NHWC format
    void init() {
      linearLoss.resize(dims);
      linearInput.resize(dims);
      output.resize(out_dims);
      target.resize(out_dims);
      weights.resize(weights_dim_shuffled);

      DeviceTensor<Device_, float, 2> tmp(weight_dims);

      linearLoss.setValues({ {0.36603546, 0.40687686, 0.87746394, 0.62148917, 0.86859787, 0.51380110,
        0.60315830, 0.00604892},
        {0.21118003, 0.13755852, 0.23697436, 0.16111487, 0.92154074, 0.52772647,
        0.00271451, 0.32741523},
        {0.35232794, 0.79406255, 0.54326051, 0.46549028, 0.16354656, 0.50212926,
        0.17194599, 0.52774191} });

      linearInput.setValues ({ { 0.87322980, -1.48464823, 0.63184929, 0.38559973, 0.41274598,
        -0.70019668, 0.10707247, 2.51629639},
        {-1.58931327, 0.81226659, -1.80089319, 2.07474923, -0.18125945,
        1.04950535, -0.04078181, -0.32585117},
        {-0.23254025, -1.10632432, -1.68039930, -0.50875676, -0.70717221,
        0.24772950, -0.08923696, 0.60365528} });

      output.setValues({ {-0.63091207,  1.48424447,  0.09024291,  0.48794979},
        { 0.24392587, -1.26946902, -0.55562776,  0.63332230},
        {-0.75866050,  0.05769435, -0.03202848,  1.19541967} });

      tmp.setValues({ { 0.30841491,  0.16301581,  0.05912393,  0.32572004, -0.00591815,
         -0.07333553,  0.16375038, -0.35274175},
        { 0.19089887, -0.24521475,  0.27066174, -0.00526837, -0.18401390,
         -0.20650741, -0.28048125,  0.29642352},
        {-0.15496132,  0.15089461,  0.16939566, -0.25025240, -0.18078347,
         -0.07853529, -0.32877934,  0.19627282},
        {-0.28125578, -0.15781732, -0.32488498, -0.08520141, -0.27685770,
         -0.02988693,  0.18739149,  0.32216403} });

      dinput.resize(dims);
      dinput.setValues({ {-0.11519448,  0.03996181,  0.14310896, -0.19761968, -0.28686517,
          -0.14561312, -0.29164833,  0.29556170},
         {-0.13882221, -0.19504318, -0.05183563, -0.12013839, -0.35180071,
          -0.15447669, -0.08925162,  0.43116185},
         { 0.21379752, -0.04886286,  0.33015090,  0.01655336, -0.25806439,
          -0.24717081, -0.32011586,  0.18866043} });

      fakeloss.resize(out_dims);
      fakeloss.setValues({ {0.13770211, 0.28582627, 0.86899745, 0.27578735},
        {0.04713255, 0.51820499, 0.27709258, 0.74432141},
        {0.47782332, 0.82197350, 0.52797425, 0.03082085} });

      weights.view() = tmp->shuffle(array<Index, 2> {1, 0});

      dweights.resize(weights.dimensions());
      dweights.setValues({ {-0.06577596, -0.76513994,  0.19567230, -0.94930124},
        {-0.69478256, -0.91280013, -1.64919329,  0.16104239},
        {-0.80080771, -2.13387632, -0.83714628, -1.21797860},
        {-0.09220973,  0.76717538,  0.64137232,  1.63494349},
        {-0.28961062, -0.55723274, -0.06491914, -0.04288082},
        { 0.07141823,  0.54735136, -0.18686420,  0.59569913},
        {-0.02981755, -0.06387962,  0.03463056, -0.00357590},
        { 0.61958170,  1.04655457,  2.41507840,  0.47002986} });

      bias.resize(array<Index, 1>({ out_dims[1] }));
      bias.setValues({ 0.87039185, 0.08955163, 0.14195210, 0.51105964 });

      dbias.resize(array<Index, 1>({ out_dims[1] }));
      dbias.setValues({ 0.66265798, 1.62600470, 1.67406428, 1.05092955 });

      target.setZero();
      (*target)(0, 1) = 1;
      (*target)(1, 3) = 1;
      (*target)(2, 2) = 1;
    }

    const array<Index, 2> dims = { 3, 8 }, out_dims = { 3, 4 }, weight_dims = { 4, 8 }, weights_dim_shuffled = { 8, 4 };
    DeviceTensor<Device_, float, 2> linearInput, linearLoss, outputGrad, output, target, weights, dinput, fakeloss, dweights;
    DeviceTensor<Device_, float, 1> bias, dbias;
  };
}