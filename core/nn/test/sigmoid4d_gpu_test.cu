#include <iostream>
#include <gtest/gtest.h>
#include <layers/sigmoid.hpp>
#include <layers/input.hpp>
#include "include/commondata4d.hpp"
#include "ops/comparisons.hpp"

using namespace EigenSinn;

namespace EigenSinnTest {

  class Sigmoid4dGpu : public ::testing::Test {

  protected:
    void SetUp() override {

      cd.init();

      output.resize(cd.dims);
      dinput.resize(cd.dims);

      output.setValues({ {{{0.51134360, 0.72302049, 0.62352163, 0.64474553},
          {0.67872196, 0.67529303, 0.51832956, 0.70183998},
          {0.71274763, 0.61557466, 0.56113505, 0.64348263},
          {0.57382047, 0.72864115, 0.65240842, 0.59056813}},

         {{0.62341493, 0.60447621, 0.58500957, 0.67366821},
          {0.61317760, 0.72338146, 0.65195811, 0.56716502},
          {0.58772844, 0.59544784, 0.61559570, 0.69484973},
          {0.65413225, 0.57363957, 0.63267386, 0.70518547}},

         {{0.70060551, 0.68135190, 0.53890121, 0.59945691},
          {0.67910093, 0.52707893, 0.63490546, 0.64169163},
          {0.66226912, 0.67900789, 0.72432953, 0.56611603},
          {0.62951565, 0.72766608, 0.60745877, 0.68293822}}},


        {{{0.64889777, 0.69969386, 0.62833762, 0.54511243},
          {0.59558344, 0.56319493, 0.67812508, 0.56710798},
          {0.67279577, 0.69970489, 0.65092820, 0.71832907},
          {0.65601897, 0.64866138, 0.72343940, 0.71602476}},

         {{0.52836722, 0.70022553, 0.69265544, 0.72806221},
          {0.59009826, 0.52707076, 0.70616192, 0.59268022},
          {0.51355594, 0.66033280, 0.61320502, 0.52473348},
          {0.55983531, 0.68745142, 0.52409112, 0.68429434}},

         {{0.71641511, 0.62119383, 0.69489610, 0.62416017},
          {0.60609156, 0.65700680, 0.63098776, 0.66693652},
          {0.50462455, 0.55706203, 0.72362930, 0.73041648},
          {0.52345121, 0.70276827, 0.62931871, 0.60222268}}} });

      dinput.setValues({ {{{0.01133973, 0.19215009, 0.11843287, 0.13651794},
          {0.16308694, 0.16055639, 0.01831316, 0.17914280},
          {0.18605940, 0.11141289, 0.06052390, 0.13547100},
          {0.07274298, 0.19529898, 0.14278510, 0.08857390}},

         {{0.11833949, 0.10140811, 0.08336174, 0.15934463},
          {0.10927122, 0.19235630, 0.14242099, 0.06635408},
          {0.08591668, 0.09311181, 0.11143158, 0.17448059},
          {0.14417422, 0.07257003, 0.12635574, 0.18131167}},

         {{0.17833216, 0.16500291, 0.03874401, 0.09681229},
          {0.16336438, 0.02702596, 0.12825982, 0.13397960},
          {0.15062360, 0.16329627, 0.19289528, 0.06534259},
          {0.12364215, 0.19476229, 0.10411861, 0.16614792}}},


        {{{0.13993239, 0.17773001, 0.12262437, 0.04486724},
          {0.09323741, 0.06251979, 0.16264907, 0.06629913},
          {0.15869068, 0.17773728, 0.14158614, 0.18942119},
          {0.14568561, 0.13973908, 0.19238931, 0.18804823}},

         {{0.02830629, 0.17808159, 0.17298160, 0.19498082},
          {0.08813503, 0.02701784, 0.18193682, 0.09054252},
          {0.01354929, 0.14910525, 0.10929579, 0.02469315},
          {0.05926238, 0.16936091, 0.02405385, 0.16712035}},

         {{0.18828233, 0.11638973, 0.17451210, 0.11899148},
          {0.10287806, 0.14647309, 0.12490975, 0.15424007},
          {0.00462427, 0.05656528, 0.19249752, 0.19626564},
          {0.02341678, 0.17974870, 0.12347224, 0.09934998}}} });
    }

    CommonData4d<GpuDevice, RowMajor> cd;
    DeviceTensor<float, 4, GpuDevice, RowMajor> output, dinput;

  };

  TEST_F(Sigmoid4dGpu, Backward) {

    Input<float, 4, GpuDevice, RowMajor> input;
    input.set_input(cd.convInput);

    EigenSinn::Sigmoid<float, 4, GpuDevice, RowMajor> sg;
    sg.init();
    sg.forward(input);
    sg.backward(input, cd.convInput.raw());

    EXPECT_TRUE(is_elementwise_approx_eq(sg.get_output(), output));
    EXPECT_TRUE(is_elementwise_approx_eq(sg.get_loss_by_input_derivative(), dinput));
  }

  TEST_F(Sigmoid4dGpu, BackwardCudnn) {

    Input<float, 4, GpuDevice, RowMajor> input;
    input.set_input(cd.convInput);

    EigenSinn::Sigmoid<float, 4, GpuDevice, RowMajor> sg;
    sg.set_cudnn(true);
    sg.init();
    sg.forward(input);
    sg.backward(input, cd.convInput.raw());

    EXPECT_TRUE(is_elementwise_approx_eq(sg.get_output(), output));
    EXPECT_TRUE(is_elementwise_approx_eq(sg.get_loss_by_input_derivative(), dinput));
  }

}